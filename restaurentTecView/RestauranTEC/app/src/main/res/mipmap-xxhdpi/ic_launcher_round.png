package com.example.restauranttec;

import android.content.Context;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ListView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentManager;
import androidx.fragment.app.FragmentTransaction;
import androidx.viewpager.widget.ViewPager;


import com.example.restauranttec.ui.main.PlaceholderFragment;
import com.example.restauranttec.ui.main.SectionsPagerAdapter;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.PolylineOptions;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.tabs.TabLayout;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity implements OnMapReadyCallback {

    private AdapterList adapterList;
    private ListView listViewRestaurant;
    private ArrayList<String[]>  listRestaurant;
    private GoogleMap mMap = null;
    private Location locationPrevious;
    private int OK_RESULT_CODE = 1;
    private int requestAccess;
    public static SupportMapFragment mapFragment;
    public static FragmentManager fragManager;
    public static MainActivity main;
    private ViewPager viewPager;
    private TabLayout tabs;
    SectionsPagerAdapter sectionsPagerAdapter;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Window w = getWindow();
        w.setFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION,
                WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
        Log.i("on"," pos8877");
        sectionsPagerAdapter = new SectionsPagerAdapter(this, getSupportFragmentManager());
        Log.i("on"," pos");
        viewPager = findViewById(R.id.view_pager);
        viewPager.setAdapter(sectionsPagerAdapter);
        tabs = findViewById(R.id.tabs);
        Log.i("on"," pos3");
        tabs.setupWithViewPager(viewPager);
        Log.i("on"," pos4");
        Bundle arguments = new Bundle();
        //fragManager = getSupportFragmentManager();
        Toast.makeText(this,R.id.map+"  pru", Toast.LENGTH_LONG).show();
        //setContentView(R.layout.fragment_map);

       // mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
        //mapFragment.getMapAsync(this);
        PlaceholderFragment.orta(this);


        initComponent();
       /* Ma_Activity fragment = new Ma_Activity();
        getSupportFragmentManager().beginTransaction().add(android.R.id.content,fragment);
        FragmentTransaction Fr = getSupportFragmentManager().beginTransaction();
        Fr.replace(android.R.id.content,fragment);
        Fr.commit();*/

    }

    private void initComponent(){
        main = this;
        /*listRestaurant = new ArrayList<String[]>();

        listViewRestaurant = findViewById(R.id.listHistory);
        adapterList = new AdapterList(this,listRestaurant);
        listViewRestaurant.setAdapter(adapterList);

        listViewRestaurant.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {

            }
        });*/


    }



    public void inser(View view){
        Log.i("on","222");
        //PlaceholderFragment.newInstance(2);

        String[] p = {"Hola"};
        PlaceholderFragment.listRestaurant.add(p);
        PlaceholderFragment.adapterList.notifyDataSetChanged();
        Toast.makeText(this, mapFragment.isVisible()+"Resume", Toast.LENGTH_LONG).show();
    }

    public static void insere(){

        Log.i("on","222");
        //PlaceholderFragment.newInstance(2);
        String[] p = {"Hola"};
        PlaceholderFragment.listRestaurant.add(p);
        PlaceholderFragment.listRestaurant.add(p);
        PlaceholderFragment.listRestaurant.add(p);
        PlaceholderFragment.adapterList.notifyDataSetChanged();

    }
    public void o(){

    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        getLocation();
    }

    public void stop(View view){
        finish();
    }

    @Override
    protected void onPause() {
        //Toast.makeText(this, "Pause", Toast.LENGTH_LONG).show();

        super.onPause();
    }


    @Override
    protected void onStop() {
        //Toast.makeText(this, "Stop", Toast.LENGTH_LONG).show();
        Fragment frg = null;
        frg = getSupportFragmentManager().findFragmentByTag("MapaP");
        final FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
        ft.detach(frg);
        ft.attach(frg);
        ft.commit();
        super.onStop();
    }

    @Override
    protected void onResume() {
        super.onResume();
        if(mapFragment != null) {
            if(!mapFragment.isVisible()) {

            }
            Toast.makeText(this, mapFragment.isVisible()+"Resume", Toast.LENGTH_LONG).show();
        }

    }

    @Override
    protected void onRestart() {
        super.onRestart();
    }

    @Override
    protected void onStart() {
        super.onStart();
    }

    private void getLocation(){
        if (ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED || ActivityCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION, android.Manifest.permission.ACCESS_COARSE_LOCATION}, requestAccess);
        }
        else{

            LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
            Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
            antut(location);
            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1500,5,locationListe);
        }
    }

    private void antut(Location location){
        if(location != null) {

            LatLng lActual = new LatLng(location.getLatitude(), location.getLongitude());
            if(locationPrevious == null){
                mMap.addMarker(new MarkerOptions().position(lActual).title("Inicio Recorrido"));
                locationPrevious = location;
            }

            LatLng lPrevious = new LatLng(locationPrevious.getLatitude(), locationPrevious.getLongitude());
            mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(lActual,18.0f));

            mMap.addPolyline(new PolylineOptions().add(lPrevious,lActual).width(10).color(Color.RED));
            locationPrevious = location;

        }
    }

    LocationListener locationListe = new LocationListener() {
        @Override
        public void onLocationChanged(Location location) {

            antut(location);
        }

        @Override
        public void onStatusChanged(String s, int i, Bundle bundle) {

        }

        @Override
        public void onProviderEnabled(String s) {

        }

        @Override
        public void onProviderDisabled(String s) {

        }
    };

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String[] permissions, int[] grantResults) {
        if (requestAccess == requestCode) {
            if(grantResults.length > 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED){
                getLocation();
            }
        } else {
            Toast.makeText(this,"Permiso denegado", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            hideSystemUI();
        }
    }

    private void hideSystemUI() {
        View decorView = getWindow().getDecorView();
        decorView.setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                        | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_FULLSCREEN);
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            